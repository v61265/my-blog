"use strict";(self.webpackChunkv61265_blog=self.webpackChunkv61265_blog||[]).push([[573],{1173:function(e,n,t){t.d(n,{p:function(){return p},A:function(){return E}});var l=t(6540),a=t(557),r=t(6835),c=t(3328),o=t(7715),m=t(7169);var s=e=>{let{post:n}=e;return null};const u=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var i=e=>{let{data:{post:n},children:t}=e;return(0,a.Y)(c.A,null,(0,a.Y)(r.DZ,{as:"h1",variant:"styles.h1"},n.title),(0,a.Y)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,a.Y)("time",null,n.date),n.tags&&(0,a.Y)(l.Fragment,null," — ",(0,a.Y)(o.A,{tags:n.tags})),n.timeToRead&&" — ",n.timeToRead&&(0,a.Y)("span",null,n.timeToRead," min read")),(0,a.Y)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:u.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},t),(0,a.Y)(s,{post:n}))};const p=e=>{var n,t,l;let{data:{post:r}}=e;return(0,a.Y)(m.A,{title:r.title,description:r.description?r.description:r.excerpt,image:r.banner?null===(n=r.banner)||void 0===n||null===(t=n.childImageSharp)||void 0===t||null===(l=t.resize)||void 0===l?void 0:l.src:void 0,pathname:r.slug,canonicalUrl:r.canonicalUrl})};function E(e){let{...n}=e;return l.createElement(i,n)}},7715:function(e,n,t){var l=t(557),a=t(6540),r=t(4194),c=t(3601),o=t(2174);n.A=e=>{let{tags:n}=e;const{tagsPath:t,basePath:m}=(0,c.A)();return(0,l.Y)(a.Fragment,null,n.map(((e,n)=>(0,l.Y)(a.Fragment,{key:e.slug},!!n&&", ",(0,l.Y)(r.Link,{sx:e=>{var n;return{...null===(n=e.styles)||void 0===n?void 0:n.a}},to:(0,o.A)("/"+m+"/"+t+"/"+e.slug)},e.name)))))}},7169:function(e,n,t){var l=t(6540),a=t(4194),r=t(7533);n.A=e=>{let{title:n="",description:t="",pathname:c="",image:o="",children:m=null,canonicalUrl:s=""}=e;const u=(0,r.A)(),{siteTitle:i,siteTitleAlt:p,siteUrl:E,siteDescription:g,siteImage:d,author:b,siteLanguage:h}=u,f={title:n?n+" | "+i:p,description:t||g,url:""+E+(c||""),image:""+E+(o||d)};return l.createElement(l.Fragment,null,l.createElement("html",{lang:h}),l.createElement("title",null,f.title),l.createElement("meta",{name:"description",content:f.description}),l.createElement("meta",{name:"image",content:f.image}),l.createElement("meta",{property:"og:title",content:f.title}),l.createElement("meta",{property:"og:url",content:f.url}),l.createElement("meta",{property:"og:description",content:f.description}),l.createElement("meta",{property:"og:image",content:f.image}),l.createElement("meta",{property:"og:type",content:"website"}),l.createElement("meta",{property:"og:image:alt",content:f.description}),l.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),l.createElement("meta",{name:"twitter:title",content:f.title}),l.createElement("meta",{name:"twitter:url",content:f.url}),l.createElement("meta",{name:"twitter:description",content:f.description}),l.createElement("meta",{name:"twitter:image",content:f.image}),l.createElement("meta",{name:"twitter:image:alt",content:f.description}),l.createElement("meta",{name:"twitter:creator",content:b}),l.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,a.withPrefix)("/favicon-32x32.png")}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,a.withPrefix)("/favicon-16x16.png")}),l.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,a.withPrefix)("/apple-touch-icon.png")}),s?l.createElement("link",{rel:"canonical",href:s}):null,m)}},2997:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.p},default:function(){return m}});var l=t(6540),a=t(8453);function r(e){const n=Object.assign({h3:"h3",p:"p",code:"code",h4:"h4",br:"br",pre:"pre",a:"a",strong:"strong"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h3,null,"什麼是 ES6"),"\n",l.createElement(n.p,null,"ES6 是指 ECMAScript 第六版，於 2015 年發布，因此又稱 ES2015 。\n",l.createElement(n.code,null,"ECMAScript")," 是一套程式碼的標準和規範， Javascript 就是依據此實作的，因此可直接使用於 JavaScipt 。"),"\n",l.createElement(n.h3,null,"let & const"),"\n",l.createElement(n.p,null,"定義變數時，除了在前面加 ",l.createElement(n.code,null,"var")," 以外，也可以使用 ",l.createElement(n.code,null,"let")," 和 ",l.createElement(n.code,null,"const")," 。"),"\n",l.createElement(n.h4,null,"差異一：重複宣告"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"const")," 用於宣告 ",l.createElement(n.code,null,"常數")," ，因此一旦宣告該常數的內容便無法更動。",l.createElement(n.br),"\n","相對的， ",l.createElement(n.code,null,"let")," 和 ",l.createElement(n.code,null,"ver")," 就可以改變。"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"const PI = 3.14;\nlet a = 123;\nPI = 3.1415926; //會出錯\na = 456; //沒有問題\n")),"\n",l.createElement(n.p,null,"此處的重複宣告是指不能改變 ",l.createElement(n.code,null,"記憶體位置"),"，因此上方例子中的數字無法被改變。但若改變物件內容不會影響到記憶體位置，因此沒有問題。"),"\n",l.createElement(n.h4,null,"差異二：作用域"),"\n",l.createElement(n.p,null,"作用域 (scope) 指的是變數的生存範圍。當你輸入 ",l.createElement(n.code,null,"console.log(a)")," 時， JavaScript 會往上找是否有宣告過 a ，並回傳該處宣告的值。例如："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"function hello() {\n  var a = 123;\n  console.log(a); //123\n}\n\nconsole.log(a); //undefined，因為 function 在不同層， a 的作用域無法到此。\n")),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"var")," 的作用域在函數內（若不是在函數內，就是整個文件內），但可能會產生變數範圍太大互相干擾出錯的狀況，例如："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"for (var i = 0; i < 5; i++) {\n  console.log('*');\n}\nconsole.log(i); //5\n")),"\n",l.createElement(n.p,null,"因此 ",l.createElement(n.code,null,"let")," 和 ",l.createElement(n.code,null,"const")," 的範圍縮小到一個 block 中（ ",l.createElement(n.code,null,"{")," 和 ",l.createElement(n.code,null,"}")," 包起來處），可以避免很多問題。"),"\n",l.createElement(n.h3,null,"Template Literals"),"\n",l.createElement(n.p,null,"Template 是樣板的意思。Template Literals 用於字串拼接，不用再只用 ",l.createElement(n.code,null,"+")," 和 ",l.createElement(n.code,null,",")," ，而是用 ",l.createElement(n.code,null,"``")," 框出文字。這種方法可用於多行字串拼接："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"let a = `hi\nabc\nwww`;\n\nconsole.log(a);\n//hi\n//abc\n//www\n")),"\n",l.createElement(n.p,null,"也可在其中使用 ",l.createElement(n.code,null,"${變數}")," 。例如："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"let name = you;\nlet hi = 'hi, ${you}';\n\nconsole.log(hi); // 'hi, you'\n")),"\n",l.createElement(n.h3,null,"Destructuring"),"\n",l.createElement(n.p,null,"提取陣列中的值時，最傳統的做法如下："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"const arr = [1, 2, 3];\nlet one = arr[0];\nlet two = arr[1];\nlet three = arr[2];\n")),"\n",l.createElement(n.p,null,"也可以使用 Destructuring 的寫法："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"const arr = [1, 2, 3, 4];\nlet [one, two, three] = arr;\nconsole.log(two); //2\n")),"\n",l.createElement(n.p,null,"同樣的也可以用在物件中："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"const obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n// let {key} = obj ，就是 let obj.key = value\nlet { a, b, c } = obj;\nconsole.log(b); //2\n")),"\n",l.createElement(n.p,null,"知道規則之後，當然可以花式解構物件："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"const obj = {\n  a : {\n    b : 'c'\n  }\n}\n\nlet {a{b}} = obj\nconsole.log(b) //c\n")),"\n",l.createElement(n.p,null,"當然也可以和函數合併"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"function des({ a, b }) {\n  console.log(a);\n}\n\ndes({ a: 1, b: 2 }); //1\n")),"\n",l.createElement(n.h3,null,"Spread Operator"),"\n",l.createElement(n.p,null,"展開運算子的寫法是在陣列或物件的名稱前方加上 ",l.createElement(n.code,null,"...")," ，以下為基本範例："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"let arr1 = [1, 2, 3]\nlet arr2 = [4, arr1] // [4, [1, 2, 3]]\nlet arr3 = [4, ..arr] // [4, 1, 2, 3]\n")),"\n",l.createElement(n.p,null,"因為展開運算子就是把陣列展開，因此也可以和函式合併使用，例如："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"function sum(a, b, c) {\n  return a + b + c;\n}\n\nlet arr = [1, 2, 3];\nconsole.log(sum(...arr)); // 6\n")),"\n",l.createElement(n.p,null,"當然要展開物件也可以："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"let obj1 = { a: 1, b: 2, c: 3 };\nlet obj2 = { ...obj1, d: 4 };\n\nconsole.log(obj2); // {a:1, b:2, c:3, d:4}\n")),"\n",l.createElement(n.p,null,"展開運算子也可以用於複製陣列和物件，但和直接指定不同，差別如下："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"let arr1 = [1, 2, 3];\nlet arr2 = arr1; // [1, 2, 3]\nlet arr3 = [...arr1]; // [1, 2, 3]\n\nconsole.log(arr1 === arr2); // true，指向同個記憶體位置\nconsole.log(arr1 === arr3); // fales ，因為記憶體位置不同\n")),"\n",l.createElement(n.h3,null,"Rest Parameters"),"\n",l.createElement(n.p,null,"反向展開可以用於解構時，將剩餘的東西放進另一個陣列。例如："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"let arr = [1, 2, 3, 4]\nlet [first, ...rest] = arr\nconsole.log(rest) // [2, 3, 4]\nlet [one, ...test, 4] = arr // 會出現錯誤，因為只能至於最後。\n")),"\n",l.createElement(n.p,null,"當然也可以和函式合併使用："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"function test(...number) {\n  return number;\n}\n\nconsole.log(test(1, 2, 3)); // [1, 2, 3]\n")),"\n",l.createElement(n.h3,null,"default Parameters"),"\n",l.createElement(n.p,null,"預設值可於函式或解構中使用，當沒輸入時，則會自動帶入該值。例如："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"function test(a = 2, b) {\n  return [a, b];\n}\n\nconsole.log(test()); // [2, undefined]\n\nlet arr = [1, 2, 3];\nlet [a, b, c, d = 7] = arr;\nconsole.log(a, b, c, d); // 1 2 3 7\n")),"\n",l.createElement(n.h3,null,"Arrow Function"),"\n",l.createElement(n.p,null,"箭頭函式簡化程式碼，提高可讀性。例如："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"var sum = function (a, b) {\n  return a + b;\n};\n\n//改成\n\nlet sum = (a, b) => {\n  return a + b;\n};\n\n//還可以簡化\n\nlet sum = (a, b) => {\n  return a + b;\n};\n\n//把大括號拿掉\n\nlet sum = (a, b) => a + b;\n\n//只有一個參數時可以不用加括號，但若沒有參數則一定要括號。\n")),"\n",l.createElement(n.h3,null,"Import & Export"),"\n",l.createElement(n.p,null,"和 require 以及 export 一樣， import 和 export 可以讓我們跨檔案提取函式和變數。但因為功能比較新，需要依靠 babel 。最簡單的寫法如下："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"export function add(a, b) {\n  return a + b;\n}\n\n//另一個檔案//\n\nimport { add } from '文件名稱';\n")),"\n",l.createElement(n.p,null,"如果想要 import 文件裡所有變數，可直接使用："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"import * as (新名稱) from '文件名稱'\n//取用時\n(新名稱).(變數名稱)()\n")),"\n",l.createElement(n.p,null,"當然也可以用預設值："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'export default function add(a, b) {\n  return a + b;\n}\n\n//另一個檔案//\n\nimport add from "文件名稱";\n\n// 其實就是\n\nimport { default } from "文件名稱";\n')),"\n",l.createElement(n.h3,null,"Babel"),"\n",l.createElement(n.p,null,"Babel 是一個 JavaScript 的翻譯器，目的是將比較新的語法轉換為舊的，讓你隨時跟上潮流。\n首先要安裝 Babel ："),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"npm install babel-loader @babel/core @babel/preset-env --save-dev\n")),"\n",l.createElement(n.h3,null,"更多 ES6 語法"),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://github.com/DrkSephy/es6-cheatsheet"},"https://github.com/DrkSephy/es6-cheatsheet")),"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"參考資料："),"\n",l.createElement(n.a,{href:"https://hackmd.io/D86KGcHVSpaRuN0cDesudw"},"JavaScript - ES6 語法、Babel 轉譯器")))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.RP)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},o=t(1173);function m(e){return l.createElement(o.A,e,l.createElement(c,e))}o.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-es-6-基礎-index-mdx-e217c2f9647aaffbcc05.js.map