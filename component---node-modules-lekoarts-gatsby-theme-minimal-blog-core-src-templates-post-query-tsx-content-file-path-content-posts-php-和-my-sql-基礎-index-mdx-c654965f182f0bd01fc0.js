"use strict";(self.webpackChunkv61265_blog=self.webpackChunkv61265_blog||[]).push([[613],{1173:function(e,n,t){t.d(n,{p:function(){return s},A:function(){return p}});var l=t(6540),r=t(557),a=t(6835),c=t(3328),m=t(7715),u=t(7169);var i=e=>{let{post:n}=e;return null};const o=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var E=e=>{let{data:{post:n},children:t}=e;return(0,r.Y)(c.A,null,(0,r.Y)(a.DZ,{as:"h1",variant:"styles.h1"},n.title),(0,r.Y)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,r.Y)("time",null,n.date),n.tags&&(0,r.Y)(l.Fragment,null," — ",(0,r.Y)(m.A,{tags:n.tags})),n.timeToRead&&" — ",n.timeToRead&&(0,r.Y)("span",null,n.timeToRead," min read")),(0,r.Y)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:o.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},t),(0,r.Y)(i,{post:n}))};const s=e=>{var n,t,l;let{data:{post:a}}=e;return(0,r.Y)(u.A,{title:a.title,description:a.description?a.description:a.excerpt,image:a.banner?null===(n=a.banner)||void 0===n||null===(t=n.childImageSharp)||void 0===t||null===(l=t.resize)||void 0===l?void 0:l.src:void 0,pathname:a.slug,canonicalUrl:a.canonicalUrl})};function p(e){let{...n}=e;return l.createElement(E,n)}},7715:function(e,n,t){var l=t(557),r=t(6540),a=t(4194),c=t(3601),m=t(2174);n.A=e=>{let{tags:n}=e;const{tagsPath:t,basePath:u}=(0,c.A)();return(0,l.Y)(r.Fragment,null,n.map(((e,n)=>(0,l.Y)(r.Fragment,{key:e.slug},!!n&&", ",(0,l.Y)(a.Link,{sx:e=>{var n;return{...null===(n=e.styles)||void 0===n?void 0:n.a}},to:(0,m.A)("/"+u+"/"+t+"/"+e.slug)},e.name)))))}},7169:function(e,n,t){var l=t(6540),r=t(4194),a=t(7533);n.A=e=>{let{title:n="",description:t="",pathname:c="",image:m="",children:u=null,canonicalUrl:i=""}=e;const o=(0,a.A)(),{siteTitle:E,siteTitleAlt:s,siteUrl:p,siteDescription:d,siteImage:h,author:$,siteLanguage:g}=o,y={title:n?n+" | "+E:s,description:t||d,url:""+p+(c||""),image:""+p+(m||h)};return l.createElement(l.Fragment,null,l.createElement("html",{lang:g}),l.createElement("title",null,y.title),l.createElement("meta",{name:"description",content:y.description}),l.createElement("meta",{name:"image",content:y.image}),l.createElement("meta",{property:"og:title",content:y.title}),l.createElement("meta",{property:"og:url",content:y.url}),l.createElement("meta",{property:"og:description",content:y.description}),l.createElement("meta",{property:"og:image",content:y.image}),l.createElement("meta",{property:"og:type",content:"website"}),l.createElement("meta",{property:"og:image:alt",content:y.description}),l.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),l.createElement("meta",{name:"twitter:title",content:y.title}),l.createElement("meta",{name:"twitter:url",content:y.url}),l.createElement("meta",{name:"twitter:description",content:y.description}),l.createElement("meta",{name:"twitter:image",content:y.image}),l.createElement("meta",{name:"twitter:image:alt",content:y.description}),l.createElement("meta",{name:"twitter:creator",content:$}),l.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,r.withPrefix)("/favicon-32x32.png")}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,r.withPrefix)("/favicon-16x16.png")}),l.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,r.withPrefix)("/apple-touch-icon.png")}),i?l.createElement("link",{rel:"canonical",href:i}):null,u)}},3395:function(e,n,t){t.r(n),t.d(n,{Head:function(){return m.p},default:function(){return u}});var l=t(6540),r=t(8453);function a(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",h3:"h3",ul:"ul",li:"li",pre:"pre",code:"code",ol:"ol",a:"a"},(0,r.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h1,null,"前言"),"\n",l.createElement(n.p,null,"第一次學 PHP 和 MySQL ，本篇會簡單記錄觀念，最主要會實作如何使用 PHP 和 MySQL 連線的基礎，也就是 CURD（Create、Read、Update 和 Delete）。既是給初學者看，也方便自己之後回頭參考。"),"\n",l.createElement(n.h1,null,"MySQL"),"\n",l.createElement(n.h2,null,"MySQL 是什麼？"),"\n",l.createElement(n.p,null,"MySQL 是一種關聯式資料庫。\n一般來說網頁的資料會被存在一個檔案中，但當網頁一大就難管理，而資料庫系統就是專門處理資料的程式，提供專門的語法操作資料庫。"),"\n",l.createElement(n.h3,null,"關聯式資料庫"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"儲存格式為 table （像是表格那樣）"),"\n",l.createElement(n.li,null,"table 之間互相關聯（例如 id 都一樣）"),"\n",l.createElement(n.li,null,"結構穩定，但相對彈性低"),"\n",l.createElement(n.li,null,"常見如 MySQL、PostgreSQL、Microsoft SQL Server、SQLite"),"\n"),"\n",l.createElement(n.h3,null,"非關聯式資料庫"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"又叫 NoSQL"),"\n",l.createElement(n.li,null,"用不同型態儲存，因此資料可放的型態也更多元（例如陣列）"),"\n",l.createElement(n.li,null,"結構較不明顯，因此彈性更高"),"\n",l.createElement(n.li,null,"常見如 mongodb。"),"\n"),"\n",l.createElement(n.h2,null,"phpmyadmin"),"\n",l.createElement(n.p,null,"本文使用的系統 MariaDB 是 MySQL 的分支，我們可以選擇使用 CLI 和資料庫溝通，也可以用 GUI 例如 phpmyadmin 。"),"\n",l.createElement(n.h2,null,"基礎語法"),"\n",l.createElement(n.p,null,"因為有人覺得比較好分辨，以下基礎語法都是大寫，但實際執行時小寫也可以。 table name 的反引號也可以省略。"),"\n",l.createElement(n.h3,null,"Insert 新增資料"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"INSERT INTO `<table name>` ('<key1>', '<key2>') VALUES('value1', 'value2');\n")),"\n",l.createElement(n.h3,null,"Update 修改資料"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"UPDATE `<table name>` SET 'key1'='value1', 'key1'='value1' WHERE 條件\n")),"\n",l.createElement(n.p,null,"要是沒設定條件，會直接影響到全部。"),"\n",l.createElement(n.h3,null,"Selector 查詢資料"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"SELECT key1, key2 FROM `<table name>` WHERE 條件;\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"可以直接用 ",l.createElement(n.code,null,"*")," 選取符合條件的資料的所有欄位。"),"\n",l.createElement(n.li,null,"若欄位填 ",l.createElement(n.code,null,"id as name")," ，就是暫時將欄位名改名。"),"\n",l.createElement(n.li,null,"條件可用 and 或 or 連接。"),"\n"),"\n",l.createElement(n.h3,null,"Delete"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"DELETE FROM `<table name>` WHERE 條件\n")),"\n",l.createElement(n.p,null,"但很多時候我們點選刪除並不是真的將資料刪除，而是將 is-delete 的攔位改成 true ，之後網站再只呈現沒被刪掉的就好了。"),"\n",l.createElement(n.h1,null,"PHP 和資料庫連線"),"\n",l.createElement(n.h2,null,"觀念"),"\n",l.createElement(n.p,null,"若網頁讀取 .css 檔案，順序是瀏覽器 request 丟給 Server 後， Server 直接將找到的檔案丟回給瀏覽器。但動態網頁不同， Server 收到瀏覽器的 Request 後，找到 .php 檔先執行完後，才將結果 response 給瀏覽器。不過根據 Server 設定部圖， .php 檔也有可能是靜態網頁，而其中差別在 Server 是否有執行。"),"\n",l.createElement(n.h2,null,"GET 和 POST"),"\n",l.createElement(n.p,null,"本文送出資料的方式是使用表單，也就是在 .php 中加入這段語法："),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"<form method='方法' action='存取目的'>\n")),"\n",l.createElement(n.h3,null,"GET"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"用 GET 的方法送出時，會在後方網址加上 ",l.createElement(n.code,null,"query string")," ，例如 ",l.createElement(n.code,null,"?key1=value1&key2=value2")," 。所以也可以直接在 url 加上 query string 也能達成一樣的效果。"),"\n",l.createElement(n.li,null,"輸入的資料會存進目標檔案的變數 ",l.createElement(n.code,null,"$_GET")," 中 ，需要提取值時就用 ",l.createElement(n.code,null,"$_GET['key']")," 。"),"\n",l.createElement(n.li,null,"可以使用函式 ",l.createElement(n.code,null,"isset($_GET['key'])")," 判斷是否有輸入值。"),"\n"),"\n",l.createElement(n.h3,null,"POST"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"提交後網址不變，只移到目的地。"),"\n",l.createElement(n.li,null,"可用 ",l.createElement(n.code,null,"$_POST['key']")," 提取資料。"),"\n",l.createElement(n.li,null,"就算沒輸入也會傳入空值，因此要用 ",l.createElement(n.code,null,"empty()")," 來判斷是否有輸入值。"),"\n",l.createElement(n.li,null,"同個檔案中可和 GET 混用，但一個表單只有一種 method 。"),"\n"),"\n",l.createElement(n.h2,null,"PHP 和資料庫連線"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"<?php\n\n    /* 基礎資料設定通常最後會隱藏起來，\n    可在 .gitignore 加入這個檔案*/\n    $server_name = 'localhost'; //伺服器名稱\n    $username = 'v61265'; //帳號\n    $password = 'v61265'; //密碼\n    $db_name = 'v61265'; //資料庫名稱\n\n    /* 四個參數依序放：伺服器名稱、帳號、密碼、資料庫名稱 */\n    $conn = new mysqli($server_name, $username, $password, $db_name);\n\n    /* 有問題就回傳錯誤資訊，\n    die() 顯示完後程式就不會繼續往下跑，\n    也可以 echo 完後 exit(); */\n    /* 存取物件屬性用 -> ，對應 JS 的 . */\n    if ($conn-> onnect_error) {\n        die('資料庫連線錯誤' . $conn->connect_error);\n    }\n\n    /* 設定檔案格式和時區 */\n    $conn->query('SET NAMES UTF8');\n    $conn->query('SET time_zone= \"+8:00\"');\n?>\n")),"\n",l.createElement(n.p,null,"這個檔案只會放連線資訊，其他檔案要用時要引入："),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"require_once('conn.php);\n")),"\n",l.createElement(n.h2,null,"CURD"),"\n",l.createElement(n.h3,null,"Read 讀取資料"),"\n",l.createElement(n.p,null,"步驟："),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"用 query 從資料庫拿取資料"),"\n",l.createElement(n.li,null,"檢查錯誤"),"\n",l.createElement(n.li,null,"拿出結果"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"<?php\n    /* 和資料庫連線 */\n    require_once('conn.php');\n\n    /* table 'user' 中的資料全部存到變數 $result */\n    $result = $conn->query(\"SELECT * FROM user\");\n\n    /* 如果 $result 為假，回傳錯誤訊息 */\n    if (!$result) {\n        die($conn->error);\n    }\n\n    /* 先執行完 $row = $result->fetch_assoc() 才判斷真假，\n    全部拿完的話 $row 為 null ，即可跳脫迴圈。*/\n    while ($row = $result->fetch_assoc()) {\n        echo \"id:\" . $row['id'] . '<br>';\n        echo \"username\" . $row['users'] . '<br>';\n    }\n?>\n")),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"->fetch_assoc()")," 可以拿到第一筆資料，第二次出現時可以拿到第二筆資料。此類推讓每個值都跑一次就可以顯示所有資料。"),"\n",l.createElement(n.h2,null,"Create 新增資料"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"<?php\n    require_once('conn.php');\n\n    /* 如果沒有輸入就提示 */\n    if (empty($_POST['username'])) {\n        die('請輸入 username');\n    }\n\n    /*得到 usernam 的值和 sql 語法*/\n    $username = $_POST['username'];\n    $sql = sprintf(\n        \"insert into user(username) values('%s')\",\n        $username\n    );\n\n    $result = $conn->query($sql);\n    if (!$result) {\n        die($conn->error);\n    }\n\n    /* 重新導向 index.php */\n    header(\"Location: index.php\");\n?>\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.code,null,"sprintf(string, variable)")," 可以想成像 ES6 的 Template Literals，前面放文字，如果遇到需要放變數的字就用 %s 、數字就用 %d ，後面依序放入變數。"),"\n",l.createElement(n.li,null,"這種狀況也可以用字串拼接的方法，例如 ",l.createElement(n.code,null,'"insert into user(username) values(\' " . %s . "\')"')),"\n",l.createElement(n.li,null,"如果使用 get 重新整理網頁又會再新增一筆資料。"),"\n",l.createElement(n.li,null,"如果要用 id 大小排序，可以用 ",l.createElement(n.code,null,'->query("SELECT * FROM user ORDER")')," 。最後加上 ",l.createElement(n.code,null,"ASC")," 是由小排到大， ",l.createElement(n.code,null,"DESC")," 則是大到小。"),"\n"),"\n",l.createElement(n.h2,null,"Delete 刪除資料"),"\n",l.createElement(n.p,null,"邏輯："),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"用 GET 的方法到 delete.php?id=x"),"\n",l.createElement(n.li,null,"用 query 刪除"),"\n",l.createElement(n.li,null,"如果 id 不存在，會執行成功但影響 0 行\n可以用 ",l.createElement(n.code,null,"$conn->affected_rows")," 看影響到幾列，藉此判斷是否成功。"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"<?php\n    require_once('conn.php');\n\n    /* 沒拿到 get 就顯示錯誤 */\n    if(empty($_GET['id'])) {\n        die('刪除失敗');\n    }\n\n    /* 設定 id 和指令 */\n    $id = $_GET['id'];\n    $sql = sprintf(\n        \"DELETE FROM user WHERE id=%d\", $id\n    );\n    echo $sql . '<br>';\n\n    /* query 執行刪除 */\n    $result = $conn->query($sql);\n    if (!$result) {\n        die($conn->error);\n    }\n\n    /* 有資料被影響就顯示成功，否則查無資料 */\n    if ($conn->affected_rows >= 1) {\n        echo '刪除成功';\n    } else {\n        echo '查無資料';\n    }\n?>\n")),"\n",l.createElement(n.h2,null,"Update 編輯資料"),"\n",l.createElement(n.p,null,"步驟："),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"用 POST 連接到 update.php"),"\n",l.createElement(n.li,null,"用 empty 檢查是否漏填"),"\n",l.createElement(n.li,null,"query 修改資料"),"\n",l.createElement(n.li,null,"若有改有誤，提醒"),"\n",l.createElement(n.li,null,"回到首頁"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"<?php\n    require_once('conn.php');\n\n    if (empty($_POST['id']) || empty($_POST['username'])) {\n        die('請輸入 id 與 username');\n    }\n\n    $id = $_POST['id'];\n    $username = $_POST['username'];\n    $sql = sprintf(\n        \"UPDATE user SET username='%s' WHERE id=%d\",\n        $username,\n        $id\n    );\n\n    echo $sql . '<br>';\n    $result = $conn->query($sql);\n    if (!$result) {\n        die($conn->error);\n    }\n\n    header(\"Location: index.php\");\n?>\n")),"\n",l.createElement(n.h1,null,"參考資料"),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://hackmd.io/HSgibRj2R22eo7bk-qbJsw"},"後端基礎 PHP 與 MySQL")))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?l.createElement(n,e,l.createElement(a,e)):a(e)},m=t(1173);function u(e){return l.createElement(m.A,e,l.createElement(c,e))}m.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-php-和-my-sql-基礎-index-mdx-c654965f182f0bd01fc0.js.map