{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-lidemy-week-15-心得-index-mdx-171000869f5193050223.js","mappings":"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","sources":["webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://v61265-blog/./content/posts/Lidemy week15 心得/index.mdx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    img: \"img\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"此份自我檢測目標：\"), \"\\n\", React.createElement(_components.p, null, \"給未來求職前的自己作為回頭複習ㄉ筆記\\nor（如果我寫到一半發懶）\\n直接想像自己在面試時被問到，我會怎麼回～\"), \"\\n\", React.createElement(_components.h2, null, \"WEEK11\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道什麼是雜湊（Hash function）、你知道什麼是加密（Encryption）、你知道雜湊與加密的差別\"), \"\\n\", React.createElement(_components.p, null, \"如果使用者密碼直接被存入資料庫中，只要資料庫直接被偷看（像是在圖書館使用時上廁所忘了換頁），或用其他攻擊方式直接叫出密碼，使用者的資訊安全就會受到威脅，因此存在資料庫中密碼欄位的密碼最好不是原始的樣子。\"), \"\\n\", React.createElement(_components.p, null, \"雜湊和加密都是把原始的明碼輸入轉換成密碼，都是只要輸入字串和加密方法一樣，就可以得到一樣的密碼。\"), \"\\n\", React.createElement(_components.p, null, \"差別在加密是一對一，因此若知道加密規則和輸出結果，就可以回推出原本的明碼，是一對一的關係；但雜湊 (hash) 是多對一的關係，也就是雖然每次輸入都會得到同樣的輸出，但因為不止這組輸入會得到一樣的輸出，因此就算知道加密規則和結果，也無法回推原本是哪個字串，因此安全性又更高。\"), \"\\n\", React.createElement(_components.p, null, \"PHP 中雜湊的語法如下：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"password_hash(<string>, <編碼方式>)\\n//可轉換成 hash ，建議存到預留 60 字元以上的欄位\\npassword_verifty(<明文>, <hash>)\\n//對照兩者是否相同。\\n\")), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道什麼是 SQL Injection 以及如何防範\"), \"\\n\", React.createElement(_components.p, null, \"SQL Injection 是在輸入的字串中夾帶 SQL 的語法，又因為字串拼接設計不良，夾帶進去的內容被當成 SQL 語法的一部份執行而導致的資安漏洞。以下舉個例子：\"), \"\\n\", React.createElement(_components.p, null, \"程式碼如下：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"$sql = sprintf(\\\"INSERT INTO comments(username, content) VALUES('%s', '%s')\\\", $_POST['username'], $_POST['content']);\\n\")), \"\\n\", React.createElement(_components.p, null, \"只要我在 content 的欄位輸入 \", React.createElement(_components.code, null, \"'), ('not_me', (select password from users));#\"), \" ，就會變成這樣：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\t$sql = INSERT INTO comments(username, content) VALUES('me', ''), ('not_me', (select password from users));#')\\n\")), \"\\n\", React.createElement(_components.p, null, \"因為 \", React.createElement(_components.code, null, \"#\"), \" 後面會變成附註，因此變成新增兩條留言，第二條的 username 和 content 附註，其中內容甚至可以叫出所有用戶的資料。超危險。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"解決方法：使用 SQL 內建機制拼接\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"$sql =\\n// 這邊預留空間的方法是用問號 '?'\\n$stmt = $conn->prepare($sql) ;\\n// 先準備好\\n$stmt->bind_param('<拼接什麼>', $<變數1>, $<變數2>) ;\\n// 如果要拼接兩個字串，就用 'ss' ，整數的話就是 'i'\\n$result = $stmt->execute()\\n// 執行 query\\n// 接著用原本的判斷式檢測是否執行成功\\n\\n$result = $stmt->get_result()\\n//這樣才算拿到結果\\n\")), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道什麼是 XSS 以及如何防範\"), \"\\n\", React.createElement(_components.p, null, \"XSS 全名 \", React.createElement(_components.code, null, \"Cross-Site Scripting\"), \" ，也就是跨網站執行 JavaScript。例如顯示留言的地方的 HTML 如下：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<div class='content'><?php echo $row['content']?><div>\\n\")), \"\\n\", React.createElement(_components.p, null, \"這時只要使用者輸入 html 或 JavaScript 語法，例如 \", React.createElement(_components.code, null, \"<script>alert('hacked')</script>\"), \" ，就會直接被解讀為程式碼的一部份並被執行。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"防範方法：字元跳脫\")), \"\\n\", React.createElement(_components.p, null, \"函式 \", React.createElement(_components.code, null, \"htmlspecialchars()\"), \" 可將 html 的特殊符號轉換成純文字。\"), \"\\n\", React.createElement(_components.p, null, \"值得注意的是，因為資料庫儲存原始資料就好，因此建議在輸出處使用。另外，因為不知道攻擊會從哪裡來，因此建議所有輸出都使用字元跳脫。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道為什麼儘管前端做了驗證，後端還是要再做一次驗證\"), \"\\n\", React.createElement(_components.p, null, \"因為前端的驗證只針對瀏覽器畫面上的驗證，但除此之外還有許多漏洞，例如不透過瀏覽器發 request 給後端即可繞過。通常簡單如「是否有東西漏填」這種驗證會給前端，而和資安相關的例如身分驗證則由後端負責。\"), \"\\n\", React.createElement(_components.h3, null, \"P2 你知道什麼是 CSRF 以及如何防範\"), \"\\n\", React.createElement(_components.p, null, \"參考資料：\\n\", React.createElement(_components.a, {\n    href: \"https://blog.techbridge.cc/2017/02/25/csrf-introduction/\"\n  }, \"讓我們來談談 CSRF\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/heidiliu2020/This-is-Codediary/blob/week11/week11_%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8_%E9%9B%9C%E6%B9%8A%E8%88%87%E5%8A%A0%E5%AF%86%E3%80%81%E5%B8%B8%E8%A6%8B%E6%94%BB%E6%93%8A.md\"\n  }, \"[week 11] 資訊安全 - 雜湊與加密 & 常見攻擊：SQL Injection、XSS\")), \"\\n\", React.createElement(_components.p, null, \"CSRF 的全名是 \", React.createElement(_components.code, null, \"是 Cross Site Request Forgery\"), \"（跨站請求偽造）。也被稱為 one-click attack 或 session riding。簡單來說就是「在不同 domain 下，偽造使用者本人發出的 request」。\"), \"\\n\", React.createElement(_components.p, null, \"平時登入網站後會得到一組 SESSION ，之後就算離開該網站，瀏覽器還是會幫你在 COOKIE 中保留 SESSION 一段時間。此時如果有個釣魚網站騙你在不知情的情況下，對該網站送出 Request （例如放在按鈕或圖片中），此時因為瀏覽器還留著你的 SESSION ，該網站以為是合法請求並接受，這樣一來釣魚網站就可以用你的身分在該網站進行操作。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"不同層面的防範辦法\")), \"\\n\", React.createElement(_components.p, null, \"對使用者端來說，最好懂的就是隨時清空 SESSION，不過這就代表每次都要重新登入，很麻煩。\"), \"\\n\", React.createElement(_components.p, null, \"Server 端可以進行雙重驗證，像是輸入驗證碼就很直接，但每個動作都要輸入一次驗證碼有點麻煩，因此最好的方法是多加一層雙重認證。可以用表單中夾帶 CSRF token ，資料確認時也要保證其有被帶上才執行，產生和儲存都由 Server 端負責，但如果攻擊者先發出 request 就可破解；第二種方法是 Double Submit Cookie ，利用「cookie 只會從相同 domain 帶上來」的特性，把資料存在使用端，但只要攻擊者掌握任何 subdomain 就可破解；最後一種是由 Client 產生 token ，同時放到表單和 cookie 中。\"), \"\\n\", React.createElement(_components.p, null, \"瀏覽器方面， Chrome 也有提供 SameSite cookie 幫 cookie 加上一層驗證。\"), \"\\n\", React.createElement(_components.h2, null, \"WEEK12\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道什麼是 SPA\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Single Page Application\"), \" 簡稱 SPA ，單介面應用程式，顧名思義就是所有動作都在一個頁面上完成，不會重新導向 index.html 以外的地方。其原理是 JavaScript 用 Ajax 動態從 Server 端拿資料，再即時 render 到 client 端上。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"優點：\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"使用者體驗較佳。每次動態更新資料只會更新部分頁面，而不是導向完全不同的頁面。\"), \"\\n\", React.createElement(_components.li, null, \"前後端分工較明確。後端負責提供 API 給前端 render。\"), \"\\n\", React.createElement(_components.li, null, \"就算 JS 掛掉， HTML 檔案還是會顯示基本的畫面而非直接掛掉。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"缺點\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"一個頁面要載入超多 .js 檔案，會跑比較慢。\"), \"\\n\", React.createElement(_components.li, null, \"SEO 差。因為真正的內容要等 JS 渲染完，比較笨的爬蟲只看到 HTML 的話就是個空殼 → 可靠 SSR 解決。\"), \"\\n\", React.createElement(_components.li, null, \"前端變的超級複雜，還會有回傳順序的問題。要是沒寫好可能會出現「明明都點到第三頁了，卻顯示第一頁的畫面」這種狀況。\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道怎麼樣用 PHP 自己寫出 API\"), \"\\n\", React.createElement(_components.p, null, \"PHP 基礎語法：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// 建立一個空陣列\\n$json = array();\\n// 在陣列中增加一個新的物件\\n$array_push($json, array(\\n\\t\\\"id\\\" => 13\\n));\\n// 轉換成 json 格式\\n$response = json_encode($json);\\n// 印出來看看\\necho $respons;\\n// 結果 [{\\\"id\\\": 13}]\\n\")), \"\\n\", React.createElement(_components.p, null, \"之後前端只要讀取 PHP echo 的 JSON 格式結果就好。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道如何在前端與自己開的 API 串接\"), \"\\n\", React.createElement(_components.p, null, \"串接 API 的方法有很多種，以下示範用 jQuery 實作 Ajax 的方法：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"$.ajax({\\n   method: 'GET',\\n   url: 'https://'\\n}).done(function(data) {\\n   console.log(data)\\n}).fail(function(err)) {\\n   console.log(err)\\n})\\n\")), \"\\n\", React.createElement(_components.p, null, \"或是\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"$.ajax({\\n    method: 'GET',\\n    url: 'https://',\\n    success: (data) => function,\\n    error: (err) => functuon\\n})\\n\")), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道在 server 與在 client render 的差別\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"server\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"PHP 拿出資料 → render 到 HTML 上 → 回傳 HTML 檔案給瀏覽器。\"), \"\\n\", React.createElement(_components.li, null, \"以上流程每進行一次就會刷新一次頁面。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"client render\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"PHP 拿出資料 → 變成特定格式(JSON) → 傳給 JavaScript → JavaScript render 到沒有資料的 HTML 上。\"), \"\\n\", React.createElement(_components.li, null, \"以上流程並不會更換頁面， PHP 只負責回傳 API 給前端，再由前端動態 render 到頁面上。\"), \"\\n\", React.createElement(_components.li, null, \"優缺點可參照上面 SPA 的條目。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"也來借用 minw 助教提供的圖解：\\n\", React.createElement(_components.img, {\n    src: \"https://user-images.githubusercontent.com/10834433/92352316-6422e280-f110-11ea-8b0d-fc29ef8fb4cf.png\",\n    alt: \"\"\n  })), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道 jQuery 是做什麼的\"), \"\\n\", React.createElement(_components.p, null, \"jQuery 是 JavaScript 的 library ，將常用的函式包在一起。早期瀏覽器和寫法都未被統一， jQuery 可以跨瀏覽器的特性是很大的優勢，也提供了更為簡潔的語法。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道 jQuery 與 vanilla js 的差別\"), \"\\n\", React.createElement(_components.p, null, \"vanilla js 就是原生 JavaScript 。而 jQuery 則是以此為基礎建立的 library ，使用前要先引入檔案才能使用。前端發展至今大專案已經有更好維護的框架了，不過較小的專案使用 jQuery 自由度反而較高。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道什麼是 Bootstrap、P2 你知道 Bootstrap 原理及如何應用\"), \"\\n\", React.createElement(_components.p, null, \"Bootstrap 是一個由 HTML、CSS 和 JavaScript 寫成的前端框架，核心的設計目標是達成 RWD 響應式與行動優先，也就是讓你的網站排版可以自動適應螢幕大小。\"), \"\\n\", React.createElement(_components.p, null, \"使用 Bootstrap 前要先引入檔案，其中設定好各種 CSS 樣式和 JavaStript 樣式，想使用時只要更改 HTML 中的 class 即可。\"), \"\\n\", React.createElement(_components.p, null, \"雖然 Bootstrap 提供各種 UI 對不善設計的工程師是一大福音，不過也因此出現了大量相似的網頁 XD\"), \"\\n\", React.createElement(_components.h2, null, \"WEEK13\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道 webpack 的目的以及原理\"), \"\\n\", React.createElement(_components.p, null, \"Webpack 是一種 module bundler ，也就是可以將各種資源打包在一起，讓你可以在瀏覽器使用它。\"), \"\\n\", React.createElement(_components.p, null, \"之前使用 node.js 時，如果要將檔案外的模組（例如另一個檔案寫好一個功能後輸出）引入，可以使用 \", React.createElement(_components.code, null, \"require\"), \"。但這個語法和瀏覽器不相容，相對的瀏覽器要使用 \", React.createElement(_components.code, null, \"<script src='目標檔案'>\"), \" 引入作為全域變數，但若一次引入不只一個檔案，可能會發生變數名稱衝突，此時就必須使用 jQuery 提供的 .conflic() 排除。\"), \"\\n\", React.createElement(_components.p, null, \"既然沒有支援就自己寫ㄅ，於是就出現各種非官方的模組化規範，直到最近出現 ES6 規範。不過 ES6 的規範支援度還是不好，例如必須開 Server 、 必須在引入時標註 \", React.createElement(_components.code, null, \"type=\\\"module\\\"；\"), \" 而且在想要引入其他人寫的套件時，必須將整份 \", React.createElement(_components.code, null, \"node_modules\"), \" 傳上去，或是在 import 輸入完整路徑，十分不好維護。\"), \"\\n\", React.createElement(_components.p, null, \"使用 Webpack 可以將所有檔案包成一個 main.js ，這樣瀏覽器只要引入就好了。更甚者它將模組的概念向外延伸至各種資源，像是 CSS 或圖片，再經過 loader 將資源打包成 .js 檔給瀏覽器使用。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你熟悉如何使用 webpack 進行模組化開發\"), \"\\n\", React.createElement(_components.p, null, \"不太熟悉（喂）\"), \"\\n\", React.createElement(_components.p, null, \"以下簡單列一下使用自己的模組的基本流程好ㄌ：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"在專案資料夾內安裝 webpack\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"npm init -y // 初始化 npm\\nnpm install webpack webpack-cli --save-dev // 安裝\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"設定 \", React.createElement(_components.code, null, \"webpack.config.js\"), \" ，最基本設定如下：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const path = require('path');\\n\\nmodule.exports = {\\n mode: 'production',  // 預設是production(壓縮代碼)， development 指定為開發環境(未壓縮代碼)\\n entry: './src/index.js', // 從哪裡引入模組\\n output: {\\n\\tfilename: 'main.js', // 輸出之後放到哪裡\\n\\tpath: path.resolve(__dirname, 'dist'),\\n },\\n};\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"設定 \", React.createElement(_components.code, null, \"package.json\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\\"scripts\\\": {\\n\\t\\\"build\\\": \\\"webpack\\\", // 之後輸入 npm run build 時就會跑 webpack ㄌ\\n\\t\\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"在檔案使用 \", React.createElement(_components.code, null, \"require\"), \" 和 \", React.createElement(_components.code, null, \"export\"), \" 進行模組的輸入和輸出\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"npm run build\"), \" 跑起來！\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"另外在使用外部模組和 Loader 時，也是遵循安裝 → 更改設定檔和指令的方法。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道如何使用 Promise、P2 你知道如何使用 fetch\"), \"\\n\", React.createElement(_components.p, null, \"資料來源：\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch\"\n  }, \"MDN - fetch\"), \" 、 \", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Using_promises\"\n  }, \"MDN - Promise\")), \"\\n\", React.createElement(_components.p, null, \"在 JavaScript 上想發非同步的 request 時，除了使用 XMLHttpRequest 以外，也可以使用 fetch 讓程式更簡潔。\"), \"\\n\", React.createElement(_components.p, null, \"最基本的語法是：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"fetch('url')\\n\")), \"\\n\", React.createElement(_components.p, null, \"之後如果要加 header 或其他設定可以用物件形式放在第二個參數中。另外，如果要 POST 的話，\", React.createElement(_components.code, null, \"body\"), \" 中的 content type 必須符合才行。\"), \"\\n\", React.createElement(_components.p, null, \"值得注意的是，因為 fecth 的回傳值不會 reject HTTP 的 error status ，因此之後還要額外偵測 status 才不會出現錯誤。另外， fetch 雖然可以接收跨站的 cookies ，卻不會主動傳送 cookies 。\"), \"\\n\", React.createElement(_components.p, null, \"fetch 出來的結果會以 Promise 形式出現，必須用 \", React.createElement(_components.code, null, \".then(cb)\"), \" 才能取得其中內容。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Promise\"), \" 是一個表示非同步運算的最終完成或失敗的物件。因此自己建立一個 Promise 必須輸入兩個函數：成功和失敗的值，而且通常只會有一個被觸發。以下是示意：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"function init(resolve, reject) {\\n\\tresolve(3);\\n\\treject(5);\\n}\\n\\nconst myPromise = new Promise(init)\\n\\nmyPromise.then((data) => {\\n\\tconsole.log(data) // 如果成功就跑出 3\\n}).catch((err) => {\\n\\tconsole.log(err) // 有錯誤的話就跑出 5\\n})\\n\")), \"\\n\", React.createElement(_components.h3, null, \"P2 你知道 gulp 的目的以及原理\"), \"\\n\", React.createElement(_components.p, null, \"glup 是一套 \", React.createElement(_components.code, null, \"task manager\"), \" ，將任務集中管理並設定執行流程。其中 task 的類型可以有很多種，也可以自訂功能。\"), \"\\n\", React.createElement(_components.h3, null, \"P2 你知道 CSS Sprites 與 Data URI 的優缺點\"), \"\\n\", React.createElement(_components.p, null, \"參考資料：\", React.createElement(_components.a, {\n    href: \"https://blog.gtwang.org/web-development/minimizing-http-request-using-data-uri/\"\n  }, \"使用 DATA URI 將圖片以 Base64 編碼並內崁至網頁中，加速載入速度\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"CSS Sprites\"), \" 是為了避免每次顯示一張圖就要發一次 HTTP request ，乾脆將所有小圖放在一張大圖上一次拿進來。顯示個別小圖的原理是先顯示大圖並設定成小圖的大小、設定成不重複，再位移到指定位置。這麼做的好處是全部只要載入一張圖，降低網路載入時間；但缺點是拼圖再選取的調整比較麻煩、不易維護，也不方便 SEO 讀取。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Data URI\"), \" 是一種檔案格式，其資料全部都是經過 base64 編碼之後，以文字的方式來儲存的。優點是可以減少 HTTP 請求的數量，直接寫進 HTML 或 CSS 中，不需要透過外部的檔案儲存；不過維護時若要修改就要重新編碼，無法快取且易讀性很差，對 SEO 同樣不友善。\"), \"\\n\", React.createElement(_components.h3, null, \"P2 你知道什麼是 uglify 與 minify\"), \"\\n\", React.createElement(_components.p, null, \"參考資料：\", React.createElement(_components.a, {\n    href: \"https://zh.wikipedia.org/wiki/%E6%A5%B5%E7%B0%A1%E5%8C%96\"\n  }, \"wiki - 極簡化\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"minify\"), \" 是在不影響功能的情況下，移除所有非功能性必要之原始碼字元，例如換行、空白、變數和函式名稱縮短之類，在不會影響運作的前提下將檔案縮小。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"uglify\"), \" 則是除了壓縮外，還會混淆程式碼，讓程式變得難以被人閱讀，可作為隱藏商業邏輯的手段。\"), \"\\n\", React.createElement(_components.h3, null, \"P3 你熟悉如何使用 gulp 建構自動化工作流程\"), \"\\n\", React.createElement(_components.p, null, \"不知道（等等），以下紀錄跑 SASS 的方法，列一下在設定檔 \", React.createElement(_components.code, null, \"gulpfile.js\"), \" 要做的事：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const { src, dest } = require('gulp');\\nconst sass = require('gulp-sass');\\nsass.compiler = require('node-sass');\\n\\nfunction defaultTask() {\\n return src('src/*.scss') // 輸入這個檔案\\n   .pipe(sass().on('error', sass.logError))\\n   .pipe(dest('./css')) // 輸出成這個檔案\\n}\\n\\nexports.default = defaultTask;\\n\")), \"\\n\", React.createElement(_components.h3, null, \"P3 你知道 CSS 優化的一些小技巧\"), \"\\n\", React.createElement(_components.p, null, \"前端的 CSS 優化主要分成三個方向：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"資源大小\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"minify：上面介紹過了。\"), \"\\n\", React.createElement(_components.li, null, \"gzip：用重新編碼的方式壓縮，此時瀏覽器已經看不懂了，必須經過解碼才能解讀。主要由後端負責。\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"載入方式\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"CSS Sprite ：上面介紹過了，將小圖拼成大圖一起載入再分別呈現。\"), \"\\n\", React.createElement(_components.li, null, \"Critical CSS：全部都要載入太慢了，先載入重要的部分。最簡單的作法是直接放至 .html 檔中。\"), \"\\n\", React.createElement(_components.li, null, \"Cache：將傳過的東西放在 client 端。主要由後端負責。\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"執行方式\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"CSS 選擇器：需要另外做判斷的 CSS Selector 較複雜，從 SASS 轉到 CSS 可能會變複雜，要注意。\"), \"\\n\", React.createElement(_components.li, null, \"屬性渲染：有些屬性可能會造成大規模重繪，例如用 \", React.createElement(_components.code, null, \"top\"), \" 定位不如用 \", React.createElement(_components.code, null, \"transform\"), \" ，因為前者定位是用 layout 會牽扯較多東西。\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"WEEK14\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道虛擬空間、虛擬主機以及實體主機的差別\"), \"\\n\", React.createElement(_components.p, null, \"資料來源：\", React.createElement(_components.a, {\n    href: \"https://wanteasy.com.tw/blog/difference-between-shared-vps-dedicated-hosting\"\n  }, \"60 秒，搞懂虛擬主機、VPS、實體主機間的差異\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Dedicated Hosting\"), \" 實體主機就是我們現在用的電腦的主機，如果用實體主機當伺服器的話，除了要像這週部屬時要裝好作業系統和架網路線外，維護起來也有點麻煩，尤其是一旦關機別人就進不來了 XD\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Shared hosting\"), \" 虛擬主機則是在遠端有台實體主機，然後切出不同的空間作為不同伺服器，但還是共用 CPU 、記憶體和硬碟，想像成宿舍有各自房間和公共空間那樣。雖然比實體主機方便維護，也較便宜，但缺乏獨立性，而且要是你鄰居習慣很差（像是流量大爆），你的伺服器就很容易不穩或當機。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Virtual Private Server\"), \" ，也就是常聽到的 VPS 也是大家共用一台主機，透過虛擬化技術把一台電腦硬體切成很多帳號，讓每個 VPS 帳號可以安裝自己的作業系統、軟體、自己管理。因為硬體成本還是大家一起均分，所以跟實體主機比起來，VPS 的費用頓時也變低了～\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道什麼是網域（Domain）\"), \"\\n\", React.createElement(_components.p, null, \"Domain 全名是 \", React.createElement(_components.code, null, \"Domain Name\"), \" ，算是 IP 位置的代稱，方便人們閱讀。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道如何設定網域（A、CNAME）\"), \"\\n\", React.createElement(_components.p, null, \"資料來源：\", React.createElement(_components.a, {\n    href: \"https://medium.com/%E4%B8%80%E5%80%8B%E4%BA%BA%E7%9A%84%E6%96%87%E8%97%9D%E5%BE%A9%E8%88%88/pm%E7%AD%86%E8%A8%98-https-a%E7%B4%80%E9%8C%84%E8%88%87cname-91f6f2a1ee2f\"\n  }, \"PM 筆記：HTTPS、A 紀錄與 CNAME\")), \"\\n\", React.createElement(_components.p, null, \"A 是 \", React.createElement(_components.code, null, \"Address\"), \" 。可以想像成 IP 位置是詳細地址，而域名則是建築物名。買好域名後 A 就是定位這棟建築物在哪裡，之後使用者輸入域名就會自動導向 A 的位置。\"), \"\\n\", React.createElement(_components.p, null, \"CNAME 全名是 \", React.createElement(_components.code, null, \"Canonical Name\"), \" ，是關連名稱與地點，其會指到一個網域名稱。用建築物來比喻可能是不同的餐廳（CNAME）都在同的大樓（網域）內，那不管我和司機說想去其中哪家餐廳都會自動被載到該大樓了。\"), \"\\n\", React.createElement(_components.h3, null, \"P1 你知道如何用 SSH 遠端連線到自己的主機、P1 你知道如何部署應用程式\"), \"\\n\", React.createElement(_components.p, null, \"知道……吧（眼神飄忽）\"), \"\\n\", React.createElement(_components.h3, null, \"P2 你知道什麼是 No SQL\"), \"\\n\", React.createElement(_components.p, null, \"參考資料：\", React.createElement(_components.a, {\n    href: \"https://www.ithome.com.tw/news/92506\"\n  }, \"了解 NoSQL 不可不知的 5 項觀念\"), \" 、 \", React.createElement(_components.a, {\n    href: \"https://hackmd.io/VP6Jq8d0Ru-jVGiO94w-Yw?view\"\n  }, \"網站部署\")), \"\\n\", React.createElement(_components.p, null, \"無論是 SQL 或 NoSQL 指的都是拿來查詢資料庫的語言，而非資料庫系統。\"), \"\\n\", React.createElement(_components.h4, null, \"關聯式資料庫 SQL\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"儲存格式為 table （像是表格那樣）\"), \"\\n\", React.createElement(_components.li, null, \"table 之間互相關聯（例如 id 都一樣）\"), \"\\n\", React.createElement(_components.li, null, \"結構穩定，但相對彈性低，也不支援 JOIN 。\"), \"\\n\", React.createElement(_components.li, null, \"Transaction 遵守 ACID 。\"), \"\\n\", React.createElement(_components.li, null, \"常見如 MySQL、PostgreSQL、Microsoft SQL Server、SQLite\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"非關聯式資料庫 NoSQL\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Not Only SQL\"), \"\\n\", React.createElement(_components.li, null, \"用不同型態儲存，因此資料可放的型態也更多元（例如陣列）\"), \"\\n\", React.createElement(_components.li, null, \"結構較不明顯，因此彈性更高，適合搜集數據。\"), \"\\n\", React.createElement(_components.li, null, \"相對的，查詢資料也比較慢。\"), \"\\n\", React.createElement(_components.li, null, \"使用 key-value 存資料，可以想像成 JSON。\"), \"\\n\", React.createElement(_components.li, null, \"具有水平擴充能力，只要增加新的伺服器節點，就可以不斷擴充資料庫系統的容量。\"), \"\\n\", React.createElement(_components.li, null, \"Transaction 遵守 CAP 。\"), \"\\n\", React.createElement(_components.li, null, \"常見如 mongodb。\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"P2 你知道什麼是 Transaction 與 lock\"), \"\\n\", React.createElement(_components.p, null, \"Transaction 指的是一組一次牽涉到多個 query 的操作，實際應用例如轉帳和購物。例如交易的時後小明給小美一百塊，這意味著小明少了一百，而小美多了一百這兩個操作。\"), \"\\n\", React.createElement(_components.p, null, \"此時只有兩個人還好，但使用者一多像是搶購票券之類的就會出問題，因為多筆資料同時進行更改時可能造成互相影響，比如說只有十張票卻有一百個人搶，發生 race condition ，最後發生超賣情形。\"), \"\\n\", React.createElement(_components.p, null, \"要避免這種狀況，只要在有人交易時先把門鎖上或放個標示說：「裡面有人ㄛ~」就可以避免了，這就是資料庫的 lock 。回到資料庫，為了維持 Transaction 的一致性（consistency）和隔離性（isolation），我們可以在資料被讀取或寫入時掛上一個 lock （像是公眾廁所燈有人使用時就會亮），其他 transaction 可以決定是否要等待或依然讀取。\"), \"\\n\", React.createElement(_components.h3, null, \"P2 你知道資料庫的 ACID 是什麼\"), \"\\n\", React.createElement(_components.p, null, \"參考資料： \", React.createElement(_components.a, {\n    href: \"https://zh.wikipedia.org/wiki/ACID\"\n  }, \"維基百科 - ACID\")), \"\\n\", React.createElement(_components.p, null, \"Transaction 是指由一系列資料庫操作組成的一個完整的邏輯過程，為了保證 Transaction 的正確性，要符合以下四個特性：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"原子性 atomicity：要嘛全部失敗，要嘛全部成功。可以想像匯款的時後只有成功（錢過去了）或失敗（錢沒過去），不會出現這邊錢減少但那邊卻沒增加的情形。如果過程中發生錯誤，則會退回開始前的狀態，就像什麼都沒發生一樣。\"), \"\\n\", React.createElement(_components.li, null, \"一致性 consistency：維持資料的一致性。也就是錢的總數相同。\"), \"\\n\", React.createElement(_components.li, null, \"隔離性 isolation：多筆交易不會互相影響，比如說不能同時改同一個值，詳細作法可看前兩題。\"), \"\\n\", React.createElement(_components.li, null, \"持久性 durability：交易成功之後，寫入的資料不會不見，就算系統故障也不會消失。\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"P3 你知道什麼是資料庫的 View 以及使用時機\"), \"\\n\", React.createElement(_components.p, null, \"View 是一張虛擬 table ，只能讀取不能改寫，好處是方便檢視不同 table 的特定欄位，在開放資料庫給他人時也方便隱藏比較機密的欄位，不過缺點是不易維護。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"CREATE VIEW view_name [(column_list)] AS\\nSELECT column_name(s)\\nFROM table_name\\nWHERE condition;\\n\")), \"\\n\", React.createElement(_components.h3, null, \"P3 你知道什麼是 Stored procedure 以及如何使用\"), \"\\n\", React.createElement(_components.p, null, \"SQL 的 function 有分兩種，一種是內建函式例如 \", React.createElement(_components.code, null, \"SUM()\"), \" ，另一種則是 Stored procedure ，其設定完後可以直接取代 query 。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"DELIMITER //\\nCREATE PROCEDURE functionName()\\n  BEGIN\\n    SQL query;\\n  END //\\nDELIMITER ;\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"DELIMITER\"), \" 是設定換行符號，先設定成 \", React.createElement(_components.code, null, \"//\"), \" 才不會和 Stored procedure 中的 query 撞到。\"), \"\\n\", React.createElement(_components.p, null, \"之後要使用 Stored procedure 就用 \", React.createElement(_components.code, null, \"CALL functionName()\"), \" 就可～\"), \"\\n\", React.createElement(_components.h3, null, \"P3 你知道資料庫的 Trigger 以及使用時機\"), \"\\n\", React.createElement(_components.p, null, \"資料來源：\", React.createElement(_components.a, {\n    href: \"https://zh.wikipedia.org/wiki/%E8%A7%A6%E5%8F%91%E5%99%A8_(%E6%95%B0%E6%8D%AE%E5%BA%93)\"\n  }, \"維基百科 - trigger\")), \"\\n\", React.createElement(_components.p, null, \"Trigger 的用於記錄資料庫的變動，並用 table 將變動記錄下來。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"delimiter //\\nCREATE TRIGGER 名稱\\n    BEFORE UPDATE FROM table名稱\\n    FOR EACH ROW\\n  BEGIN\\n    要做什麼;\\n  END //\\n  delimiter;\\n\")), \"\\n\", React.createElement(_components.h3, null, \"跨題目資料來源\"), \"\\n\", React.createElement(_components.p, null, \"同學們的自我檢測：\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/Lidemy/mentor-program-4th-Nicolakacha/pull/29/files\"\n  }, \"Nicolacha\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/Lidemy/mentor-program-4th-awuuu0716/pull/18/files?short_path=d5209b1#diff-515aba90d9fdcb37d43a64182f10f1ae\"\n  }, \"awu\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://hackmd.io/VP6Jq8d0Ru-jVGiO94w-Yw?view\"\n  }, \"Ruofan\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/yi-hsuanlee/Documents/pratice/myblog/content/posts/Lidemy week15 心得/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","h2","p","h3","pre","code","strong","ol","li","ul","img","h4","_provideComponents","components","alt","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}