{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-php-和-my-sql-基礎-index-mdx-c654965f182f0bd01fc0.js","mappings":"qOAMA,MAFmBA,IAAA,IAAC,KAAEC,GAAmBD,EAAA,OAAK,IAAI,EC4BlD,MACME,EADK,CAAC,OAAD,aACOC,KAAKC,GAAC,0BAA+BA,EAAC,IAAIA,EAAC,SAsC7D,MApCwEJ,IAAA,IAAGK,MAAM,KAAEJ,GAAM,SAAEK,GAAUN,EAAA,OACnGO,EAAAA,EAAAA,GAACC,EAAAA,EAAM,MACLD,EAAAA,EAAAA,GAACE,EAAAA,GAAO,CAACC,GAAG,KAAKC,QAAQ,aACtBV,EAAKW,QAERL,EAAAA,EAAAA,GAAA,KAAGM,GAAI,CAAEC,MAAM,YAAcC,GAAI,EAAGC,EAAG,CAAEF,MAAM,aAAgBG,SAAU,CAAC,EAAG,EAAG,MAC9EV,EAAAA,EAAAA,GAAA,YAAON,EAAKiB,MACXjB,EAAKkB,OACJZ,EAAAA,EAAAA,GAACa,EAAAA,SAAc,YAEbb,EAAAA,EAAAA,GAACc,EAAAA,EAAQ,CAACF,KAAMlB,EAAKkB,QAGxBlB,EAAKqB,YAAU,MACfrB,EAAKqB,aAAcf,EAAAA,EAAAA,GAAA,YAAON,EAAKqB,WAAW,eAE7Cf,EAAAA,EAAAA,GAAA,WACEM,GAAI,CACFU,GAAI,EACJ,6BAA8B,CAC5BA,GAAI,CAAC,EAAG,EAAG,GACXC,aAAa,MACbC,UAAWvB,EAAOwB,KAAK,MACvB,2BAA4B,CAC1BF,aAAa,QAGjBb,QAAQ,mBAGTL,IAEHC,EAAAA,EAAAA,GAACoB,EAAU,CAAC1B,KAAMA,IACX,EAKJ,MAAM2B,EAA4BC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,IAAG3B,MAAM,KAAEJ,IAAQ4B,EAAA,OAC1DtB,EAAAA,EAAAA,GAAC0B,EAAAA,EAAG,CACFrB,MAAOX,EAAKW,MACZsB,YAAajC,EAAKiC,YAAcjC,EAAKiC,YAAcjC,EAAKkC,QACxDC,MAAOnC,EAAKoC,OAAoB,QAAdP,EAAG7B,EAAKoC,cAAM,IAAAP,GAAiB,QAAjBC,EAAXD,EAAaQ,uBAAe,IAAAP,GAAQ,QAARC,EAA5BD,EAA8BQ,cAAM,IAAAP,OAAzB,EAAXA,EAAsCQ,SAAMC,EACjEC,SAAUzC,EAAK0C,KACfC,aAAc3C,EAAK2C,cACnB,EC5EW,SAASC,EAAmB7C,GAAwC,OAAlC8C,GAA+B9C,EAC9E,OAAOoB,EAAAA,cAAC2B,EAASD,EACnB,C,4ECyBA,IAjBiB9C,IAA0B,IAAzB,KAAEmB,GAAiBnB,EACnC,MAAM,SAAEgD,EAAQ,SAAEC,IAAaC,EAAAA,EAAAA,KAE/B,OACE3C,EAAAA,EAAAA,GAACa,EAAAA,SAAc,KACZD,EAAKhB,KAAI,CAACgD,EAAKC,KACd7C,EAAAA,EAAAA,GAACa,EAAAA,SAAc,CAACiC,IAAKF,EAAIR,QACpBS,GAAC,MACJ7C,EAAAA,EAAAA,GAAC+C,EAAAA,KAAI,CAACzC,GAAK0C,IAAC,IAAAC,EAAA,MAAM,IAAa,QAAXA,EAAGD,EAAEE,cAAM,IAAAD,OAAA,EAARA,EAAUxC,EAAG,EAAG0C,IAAIC,EAAAA,EAAAA,GAAe,IAAIV,EAAQ,IAAID,EAAQ,IAAIG,EAAIR,OACvFQ,EAAIS,SAII,C,yDCyCrB,IAvDY5D,IAOK,IAPJ,MACXY,EAAK,GAAK,YACVsB,EAAW,GAAK,SAChBQ,EAAQ,GAAK,MACbN,EAAK,GAAK,SACV9B,EAAW,KAAI,aACfsC,EAAY,IACH5C,EACT,MAAM6D,GAAOC,EAAAA,EAAAA,MAEP,UACJC,EACAC,aAAcC,EAAY,QAC1BC,EACAC,gBAAiBC,EACjBC,UAAWC,EAAY,OACvBC,EAAM,aACNC,GACEX,EAEEY,EAAM,CACV7D,MAAOA,EAAWA,EAAK,MAAMmD,EAAcE,EAC3C/B,YAAaA,GAAekC,EAC5BM,IAAI,GAAIR,GAAUxB,GAAQ,IAC1BN,MAAM,GAAI8B,GAAU9B,GAASkC,IAE/B,OACElD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAMuD,KAAMH,IACZpD,EAAAA,cAAA,aAAQqD,EAAI7D,OACZQ,EAAAA,cAAA,QAAMwC,KAAK,cAAcgB,QAASH,EAAIvC,cACtCd,EAAAA,cAAA,QAAMwC,KAAK,QAAQgB,QAASH,EAAIrC,QAChChB,EAAAA,cAAA,QAAMyD,SAAS,WAAWD,QAASH,EAAI7D,QACvCQ,EAAAA,cAAA,QAAMyD,SAAS,SAASD,QAASH,EAAIC,MACrCtD,EAAAA,cAAA,QAAMyD,SAAS,iBAAiBD,QAASH,EAAIvC,cAC7Cd,EAAAA,cAAA,QAAMyD,SAAS,WAAWD,QAASH,EAAIrC,QACvChB,EAAAA,cAAA,QAAMyD,SAAS,UAAUD,QAAQ,YACjCxD,EAAAA,cAAA,QAAMyD,SAAS,eAAeD,QAASH,EAAIvC,cAC3Cd,EAAAA,cAAA,QAAMwC,KAAK,eAAegB,QAAQ,wBAClCxD,EAAAA,cAAA,QAAMwC,KAAK,gBAAgBgB,QAASH,EAAI7D,QACxCQ,EAAAA,cAAA,QAAMwC,KAAK,cAAcgB,QAASH,EAAIC,MACtCtD,EAAAA,cAAA,QAAMwC,KAAK,sBAAsBgB,QAASH,EAAIvC,cAC9Cd,EAAAA,cAAA,QAAMwC,KAAK,gBAAgBgB,QAASH,EAAIrC,QACxChB,EAAAA,cAAA,QAAMwC,KAAK,oBAAoBgB,QAASH,EAAIvC,cAC5Cd,EAAAA,cAAA,QAAMwC,KAAK,kBAAkBgB,QAASL,IACtCnD,EAAAA,cAAA,QAAMwC,KAAK,eAAegB,QAAQ,wCAClCxD,EAAAA,cAAA,QAAM0D,IAAI,OAAOC,KAAK,YAAYC,MAAM,QAAQC,MAAMC,EAAAA,EAAAA,YAAW,wBACjE9D,EAAAA,cAAA,QAAM0D,IAAI,OAAOC,KAAK,YAAYC,MAAM,QAAQC,MAAMC,EAAAA,EAAAA,YAAW,wBACjE9D,EAAAA,cAAA,QAAM0D,IAAI,mBAAmBE,MAAM,UAAUC,MAAMC,EAAAA,EAAAA,YAAW,2BAC7DtC,EAAexB,EAAAA,cAAA,QAAM0D,IAAI,YAAYG,KAAMrC,IAAmB,KAC9DtC,EACA,C,wHC7DP,SAAS6E,EAAkBrC,GACzB,MAAMsC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,GAAI,KACJ/E,EAAG,MACFgF,EAAAA,EAAAA,MAAsBlD,EAAMmD,YAC/B,OAAO7E,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBgE,EAAYG,GAAI,KAAM,MAAO,KAAMnE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,uHAAwH,KAAMpE,EAAAA,cAAoBgE,EAAYG,GAAI,KAAM,SAAU,KAAMnE,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,cAAe,KAAMrE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,mFAAoF,KAAMpE,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,UAAW,KAAMtE,EAAAA,cAAoBgE,EAAYO,GAAI,KAAM,KAAMvE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,wBAAyB,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,2BAA4B,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,eAAgB,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,oDAAqD,MAAO,KAAMxE,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,WAAY,KAAMtE,EAAAA,cAAoBgE,EAAYO,GAAI,KAAM,KAAMvE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,YAAa,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,+BAAgC,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,iBAAkB,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,gBAAiB,MAAO,KAAMxE,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,cAAe,KAAMrE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,4EAA6E,KAAMpE,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,QAAS,KAAMrE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,6DAA8D,KAAMpE,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,eAAgB,KAAMtE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,kFAAmF,KAAM1E,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,eAAgB,KAAMtE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,0EAA2E,KAAM1E,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,qBAAsB,KAAMpE,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,iBAAkB,KAAMtE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,sDAAuD,KAAM1E,EAAAA,cAAoBgE,EAAYO,GAAI,KAAM,KAAMvE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,SAAUxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,KAAM,oBAAqB,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,QAASxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,cAAe,iBAAkB,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,qBAAsB,MAAO,KAAMxE,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,UAAW,KAAMtE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,0CAA2C,KAAM1E,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,qEAAsE,KAAMpE,EAAAA,cAAoBgE,EAAYG,GAAI,KAAM,cAAe,KAAMnE,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,MAAO,KAAMrE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,6LAA8L,KAAMpE,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,cAAe,KAAMrE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,qCAAsC,KAAMpE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,uCAAwC,KAAM1E,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,OAAQ,KAAMtE,EAAAA,cAAoBgE,EAAYO,GAAI,KAAM,KAAMvE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,yBAA0BxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,gBAAiB,QAAS1E,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,4BAA6B,6CAA8C,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,mBAAoBxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,SAAU,gBAAiB1E,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,gBAAiB,MAAO,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,UAAWxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,uBAAwB,cAAe,MAAO,KAAM1E,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,QAAS,KAAMtE,EAAAA,cAAoBgE,EAAYO,GAAI,KAAM,KAAMvE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,mBAAoB,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,MAAOxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,iBAAkB,UAAW,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,oBAAqBxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,WAAY,eAAgB,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,qCAAsC,MAAO,KAAMxE,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,cAAe,KAAMrE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,inBAAknB,KAAM1E,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,2BAA4B,KAAMpE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,+BAAgC,KAAM1E,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,QAAS,KAAMrE,EAAAA,cAAoBgE,EAAYM,GAAI,KAAM,aAAc,KAAMtE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,OAAQ,KAAMpE,EAAAA,cAAoBgE,EAAYW,GAAI,KAAM,KAAM3E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,oBAAqB,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,QAAS,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,QAAS,MAAO,KAAMxE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,0eAA2e,KAAM1E,EAAAA,cAAoBgE,EAAYI,EAAG,KAAMpE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,mBAAoB,oDAAqD,KAAM1E,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,eAAgB,KAAMrE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,4dAA6d,KAAM1E,EAAAA,cAAoBgE,EAAYO,GAAI,KAAM,KAAMvE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAMxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,6BAA8B,6EAA8E,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,sBAAuBxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,yDAA4D,KAAM1E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,6BAA8B,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,oBAAqBxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,uCAA0C,UAAW1E,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,OAAQ,YAAa1E,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,QAAS,WAAY,MAAO,KAAM1E,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,eAAgB,KAAMrE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,OAAQ,KAAMpE,EAAAA,cAAoBgE,EAAYW,GAAI,KAAM,KAAM3E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,8BAA+B,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,cAAe,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,+BAAgCxE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,wBAAyB,qBAAsB,MAAO,KAAM1E,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,mhBAAohB,KAAM1E,EAAAA,cAAoBgE,EAAYK,GAAI,KAAM,eAAgB,KAAMrE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAM,OAAQ,KAAMpE,EAAAA,cAAoBgE,EAAYW,GAAI,KAAM,KAAM3E,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,yBAA0B,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,kBAAmB,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,cAAe,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,YAAa,KAAMxE,EAAAA,cAAoBgE,EAAYQ,GAAI,KAAM,QAAS,MAAO,KAAMxE,EAAAA,cAAoBgE,EAAYS,IAAK,KAAMzE,EAAAA,cAAoBgE,EAAYU,KAAM,KAAM,4eAA6e,KAAM1E,EAAAA,cAAoBgE,EAAYG,GAAI,KAAM,QAAS,KAAMnE,EAAAA,cAAoBgE,EAAYI,EAAG,KAAMpE,EAAAA,cAAoBgE,EAAYpE,EAAG,CACjsViE,KAAM,4CACL,qBACL,CAKA,MAJA,SAAoBnC,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOoD,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBlD,EAAMmD,YAC3E,OAAOE,EAAY/E,EAAAA,cAAoB+E,EAAWrD,EAAO1B,EAAAA,cAAoB+D,EAAmBrC,IAAUqC,EAAkBrC,EAC9H,E,UCnBe,SAASsD,EAAiBtD,GACvC,OAAO1B,EAAAA,cAAoBiF,EAAAA,EAAevD,EAAO1B,EAAAA,cAAoBkF,EAAqBxD,GAC5F,CAHAuD,EAAAA,C","sources":["webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://v61265-blog/./content/posts/PHP 和 MySQL 基礎/index.mdx","webpack://v61265-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"前言\"), \"\\n\", React.createElement(_components.p, null, \"第一次學 PHP 和 MySQL ，本篇會簡單記錄觀念，最主要會實作如何使用 PHP 和 MySQL 連線的基礎，也就是 CURD（Create、Read、Update 和 Delete）。既是給初學者看，也方便自己之後回頭參考。\"), \"\\n\", React.createElement(_components.h1, null, \"MySQL\"), \"\\n\", React.createElement(_components.h2, null, \"MySQL 是什麼？\"), \"\\n\", React.createElement(_components.p, null, \"MySQL 是一種關聯式資料庫。\\n一般來說網頁的資料會被存在一個檔案中，但當網頁一大就難管理，而資料庫系統就是專門處理資料的程式，提供專門的語法操作資料庫。\"), \"\\n\", React.createElement(_components.h3, null, \"關聯式資料庫\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"儲存格式為 table （像是表格那樣）\"), \"\\n\", React.createElement(_components.li, null, \"table 之間互相關聯（例如 id 都一樣）\"), \"\\n\", React.createElement(_components.li, null, \"結構穩定，但相對彈性低\"), \"\\n\", React.createElement(_components.li, null, \"常見如 MySQL、PostgreSQL、Microsoft SQL Server、SQLite\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"非關聯式資料庫\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"又叫 NoSQL\"), \"\\n\", React.createElement(_components.li, null, \"用不同型態儲存，因此資料可放的型態也更多元（例如陣列）\"), \"\\n\", React.createElement(_components.li, null, \"結構較不明顯，因此彈性更高\"), \"\\n\", React.createElement(_components.li, null, \"常見如 mongodb。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"phpmyadmin\"), \"\\n\", React.createElement(_components.p, null, \"本文使用的系統 MariaDB 是 MySQL 的分支，我們可以選擇使用 CLI 和資料庫溝通，也可以用 GUI 例如 phpmyadmin 。\"), \"\\n\", React.createElement(_components.h2, null, \"基礎語法\"), \"\\n\", React.createElement(_components.p, null, \"因為有人覺得比較好分辨，以下基礎語法都是大寫，但實際執行時小寫也可以。 table name 的反引號也可以省略。\"), \"\\n\", React.createElement(_components.h3, null, \"Insert 新增資料\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"INSERT INTO `<table name>` ('<key1>', '<key2>') VALUES('value1', 'value2');\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Update 修改資料\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"UPDATE `<table name>` SET 'key1'='value1', 'key1'='value1' WHERE 條件\\n\")), \"\\n\", React.createElement(_components.p, null, \"要是沒設定條件，會直接影響到全部。\"), \"\\n\", React.createElement(_components.h3, null, \"Selector 查詢資料\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"SELECT key1, key2 FROM `<table name>` WHERE 條件;\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"可以直接用 \", React.createElement(_components.code, null, \"*\"), \" 選取符合條件的資料的所有欄位。\"), \"\\n\", React.createElement(_components.li, null, \"若欄位填 \", React.createElement(_components.code, null, \"id as name\"), \" ，就是暫時將欄位名改名。\"), \"\\n\", React.createElement(_components.li, null, \"條件可用 and 或 or 連接。\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Delete\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"DELETE FROM `<table name>` WHERE 條件\\n\")), \"\\n\", React.createElement(_components.p, null, \"但很多時候我們點選刪除並不是真的將資料刪除，而是將 is-delete 的攔位改成 true ，之後網站再只呈現沒被刪掉的就好了。\"), \"\\n\", React.createElement(_components.h1, null, \"PHP 和資料庫連線\"), \"\\n\", React.createElement(_components.h2, null, \"觀念\"), \"\\n\", React.createElement(_components.p, null, \"若網頁讀取 .css 檔案，順序是瀏覽器 request 丟給 Server 後， Server 直接將找到的檔案丟回給瀏覽器。但動態網頁不同， Server 收到瀏覽器的 Request 後，找到 .php 檔先執行完後，才將結果 response 給瀏覽器。不過根據 Server 設定部圖， .php 檔也有可能是靜態網頁，而其中差別在 Server 是否有執行。\"), \"\\n\", React.createElement(_components.h2, null, \"GET 和 POST\"), \"\\n\", React.createElement(_components.p, null, \"本文送出資料的方式是使用表單，也就是在 .php 中加入這段語法：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<form method='方法' action='存取目的'>\\n\")), \"\\n\", React.createElement(_components.h3, null, \"GET\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"用 GET 的方法送出時，會在後方網址加上 \", React.createElement(_components.code, null, \"query string\"), \" ，例如 \", React.createElement(_components.code, null, \"?key1=value1&key2=value2\"), \" 。所以也可以直接在 url 加上 query string 也能達成一樣的效果。\"), \"\\n\", React.createElement(_components.li, null, \"輸入的資料會存進目標檔案的變數 \", React.createElement(_components.code, null, \"$_GET\"), \" 中 ，需要提取值時就用 \", React.createElement(_components.code, null, \"$_GET['key']\"), \" 。\"), \"\\n\", React.createElement(_components.li, null, \"可以使用函式 \", React.createElement(_components.code, null, \"isset($_GET['key'])\"), \" 判斷是否有輸入值。\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"POST\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"提交後網址不變，只移到目的地。\"), \"\\n\", React.createElement(_components.li, null, \"可用 \", React.createElement(_components.code, null, \"$_POST['key']\"), \" 提取資料。\"), \"\\n\", React.createElement(_components.li, null, \"就算沒輸入也會傳入空值，因此要用 \", React.createElement(_components.code, null, \"empty()\"), \" 來判斷是否有輸入值。\"), \"\\n\", React.createElement(_components.li, null, \"同個檔案中可和 GET 混用，但一個表單只有一種 method 。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"PHP 和資料庫連線\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<?php\\n\\n    /* 基礎資料設定通常最後會隱藏起來，\\n    可在 .gitignore 加入這個檔案*/\\n    $server_name = 'localhost'; //伺服器名稱\\n    $username = 'v61265'; //帳號\\n    $password = 'v61265'; //密碼\\n    $db_name = 'v61265'; //資料庫名稱\\n\\n    /* 四個參數依序放：伺服器名稱、帳號、密碼、資料庫名稱 */\\n    $conn = new mysqli($server_name, $username, $password, $db_name);\\n\\n    /* 有問題就回傳錯誤資訊，\\n    die() 顯示完後程式就不會繼續往下跑，\\n    也可以 echo 完後 exit(); */\\n    /* 存取物件屬性用 -> ，對應 JS 的 . */\\n    if ($conn-> onnect_error) {\\n        die('資料庫連線錯誤' . $conn->connect_error);\\n    }\\n\\n    /* 設定檔案格式和時區 */\\n    $conn->query('SET NAMES UTF8');\\n    $conn->query('SET time_zone= \\\"+8:00\\\"');\\n?>\\n\")), \"\\n\", React.createElement(_components.p, null, \"這個檔案只會放連線資訊，其他檔案要用時要引入：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"require_once('conn.php);\\n\")), \"\\n\", React.createElement(_components.h2, null, \"CURD\"), \"\\n\", React.createElement(_components.h3, null, \"Read 讀取資料\"), \"\\n\", React.createElement(_components.p, null, \"步驟：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"用 query 從資料庫拿取資料\"), \"\\n\", React.createElement(_components.li, null, \"檢查錯誤\"), \"\\n\", React.createElement(_components.li, null, \"拿出結果\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<?php\\n    /* 和資料庫連線 */\\n    require_once('conn.php');\\n\\n    /* table 'user' 中的資料全部存到變數 $result */\\n    $result = $conn->query(\\\"SELECT * FROM user\\\");\\n\\n    /* 如果 $result 為假，回傳錯誤訊息 */\\n    if (!$result) {\\n        die($conn->error);\\n    }\\n\\n    /* 先執行完 $row = $result->fetch_assoc() 才判斷真假，\\n    全部拿完的話 $row 為 null ，即可跳脫迴圈。*/\\n    while ($row = $result->fetch_assoc()) {\\n        echo \\\"id:\\\" . $row['id'] . '<br>';\\n        echo \\\"username\\\" . $row['users'] . '<br>';\\n    }\\n?>\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"->fetch_assoc()\"), \" 可以拿到第一筆資料，第二次出現時可以拿到第二筆資料。此類推讓每個值都跑一次就可以顯示所有資料。\"), \"\\n\", React.createElement(_components.h2, null, \"Create 新增資料\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<?php\\n    require_once('conn.php');\\n\\n    /* 如果沒有輸入就提示 */\\n    if (empty($_POST['username'])) {\\n        die('請輸入 username');\\n    }\\n\\n    /*得到 usernam 的值和 sql 語法*/\\n    $username = $_POST['username'];\\n    $sql = sprintf(\\n        \\\"insert into user(username) values('%s')\\\",\\n        $username\\n    );\\n\\n    $result = $conn->query($sql);\\n    if (!$result) {\\n        die($conn->error);\\n    }\\n\\n    /* 重新導向 index.php */\\n    header(\\\"Location: index.php\\\");\\n?>\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"sprintf(string, variable)\"), \" 可以想成像 ES6 的 Template Literals，前面放文字，如果遇到需要放變數的字就用 %s 、數字就用 %d ，後面依序放入變數。\"), \"\\n\", React.createElement(_components.li, null, \"這種狀況也可以用字串拼接的方法，例如 \", React.createElement(_components.code, null, \"\\\"insert into user(username) values(' \\\" . %s . \\\"')\\\"\")), \"\\n\", React.createElement(_components.li, null, \"如果使用 get 重新整理網頁又會再新增一筆資料。\"), \"\\n\", React.createElement(_components.li, null, \"如果要用 id 大小排序，可以用 \", React.createElement(_components.code, null, \"->query(\\\"SELECT * FROM user ORDER\\\")\"), \" 。最後加上 \", React.createElement(_components.code, null, \"ASC\"), \" 是由小排到大， \", React.createElement(_components.code, null, \"DESC\"), \" 則是大到小。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Delete 刪除資料\"), \"\\n\", React.createElement(_components.p, null, \"邏輯：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"用 GET 的方法到 delete.php?id=x\"), \"\\n\", React.createElement(_components.li, null, \"用 query 刪除\"), \"\\n\", React.createElement(_components.li, null, \"如果 id 不存在，會執行成功但影響 0 行\\n可以用 \", React.createElement(_components.code, null, \"$conn->affected_rows\"), \" 看影響到幾列，藉此判斷是否成功。\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<?php\\n    require_once('conn.php');\\n\\n    /* 沒拿到 get 就顯示錯誤 */\\n    if(empty($_GET['id'])) {\\n        die('刪除失敗');\\n    }\\n\\n    /* 設定 id 和指令 */\\n    $id = $_GET['id'];\\n    $sql = sprintf(\\n        \\\"DELETE FROM user WHERE id=%d\\\", $id\\n    );\\n    echo $sql . '<br>';\\n\\n    /* query 執行刪除 */\\n    $result = $conn->query($sql);\\n    if (!$result) {\\n        die($conn->error);\\n    }\\n\\n    /* 有資料被影響就顯示成功，否則查無資料 */\\n    if ($conn->affected_rows >= 1) {\\n        echo '刪除成功';\\n    } else {\\n        echo '查無資料';\\n    }\\n?>\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Update 編輯資料\"), \"\\n\", React.createElement(_components.p, null, \"步驟：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"用 POST 連接到 update.php\"), \"\\n\", React.createElement(_components.li, null, \"用 empty 檢查是否漏填\"), \"\\n\", React.createElement(_components.li, null, \"query 修改資料\"), \"\\n\", React.createElement(_components.li, null, \"若有改有誤，提醒\"), \"\\n\", React.createElement(_components.li, null, \"回到首頁\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<?php\\n    require_once('conn.php');\\n\\n    if (empty($_POST['id']) || empty($_POST['username'])) {\\n        die('請輸入 id 與 username');\\n    }\\n\\n    $id = $_POST['id'];\\n    $username = $_POST['username'];\\n    $sql = sprintf(\\n        \\\"UPDATE user SET username='%s' WHERE id=%d\\\",\\n        $username,\\n        $id\\n    );\\n\\n    echo $sql . '<br>';\\n    $result = $conn->query($sql);\\n    if (!$result) {\\n        die($conn->error);\\n    }\\n\\n    header(\\\"Location: index.php\\\");\\n?>\\n\")), \"\\n\", React.createElement(_components.h1, null, \"參考資料\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://hackmd.io/HSgibRj2R22eo7bk-qbJsw\"\n  }, \"後端基礎 PHP 與 MySQL\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/yi-hsuanlee/Documents/pratice/myblog/content/posts/PHP 和 MySQL 基礎/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","h1","p","h2","h3","ul","li","pre","code","ol","_provideComponents","components","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}